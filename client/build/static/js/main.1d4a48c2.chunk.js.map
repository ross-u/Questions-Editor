{"version":3,"sources":["utils/config.js","components/QuestionTitle.js","components/AddImage.js","components/Label.js","components/RowOptions.js","components/AddButton.js","utils/schemas.js","utils/normalizeNumber.js","screens/QuestionScreen.js","redux/actions/index.js","screens/Dashboard.js","App.js","redux/reducers/index.js","serviceWorker.js","index.js"],"names":["API_URL","MAX_SIZE","columns","rows","styles","questionInput","fontSize","width","margin","marginLeft","resize","maxHeight","overflow","border","borderBottom","QuestionTitle","props","handleChange","value","react_default","a","createElement","onSubmit","e","preventDefault","htmlFor","react_textarea_autosize_esm_browser","type","onChange","placeholder","style","AddButton","state","selectedFile","currentLabel","triggerFileInput","_this","fileInput","click","fileSelectedHandler","_callee","regenerator_default","wrap","_context","prev","next","setState","target","files","fileUploadHandler","stop","url","concat","fd","FormData","append","name","axios","post","headers","Content-Type","then","res","labelType","slice","updateImage","data","catch","err","console","error","M","AutoInit","_this2","this","label","action","display","ref","image","src","alt","labelImage","addBtnWrapper","href","onClick","addImageBtn","className","Component","background","textDecoration","height","marginBottom","boxShadow","textAlign","paddingTop","deleteLabel","row","position","left","color","col","top","labelContainer","alignItems","justifyContent","flexDirection","padding","marginTop","labelInput","marginRight","verticalAlign","Label","index","labelMethods","handleLabelChange","AddImage","RowOptions","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderRadioButtons","colIndex","updateRow","rowIndex","key","inputBox","radioInput","id","checked","answersArray","length","updateState","_ref","asyncToGenerator","mark","answers","Array","fill","_x","apply","arguments","equal","_this$props","indexNum","toConsumableArray","inputFormWrapper","inputForm","map","opacity","addButton","column","addLabel","Question","question","imagesUploaded","minCol","undefined","maxCol","minRow","maxRow","Column","Row","answer","normalizeNumber","num","isFinite","QuestionScreen","handleTitleChange","updateQuestion","_callee2","i","rowsOrColumns","labelsArray","_context2","defineProperty","setLabelLengths","_callee3","_context3","abrupt","push","_callee4","_this$setState3","_context4","splice","_callee5","imageUrl","_this$setState4","_context5","_callee6","minLabel","maxLabel","_context6","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","forEach","obj","_callee7","numberOfColumns","checkedIndex","_context7","resetRows","_callee8","emptyRows","_context8","saveQuestion","history","location","_callee9","_context9","shortid","generate","createQuestion","_this3","_this$state","components_QuestionTitle","components_Label","components_AddButton","components_RowOptions","QuestionScreenWithRouter","withRouter","connect","questions","dispatch","updatedQuestion","Dashboard","getAllQuestions","get","storeAllQuestions","deleteQuestion","delete","Link","to","pathname","DashboardWithRouter","App","BrowserRouter","Switch","Route","exact","path","component","allReducers","combineReducers","selectedQuestionId","newState","q","objectSpread","Boolean","window","hostname","match","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","document","title","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d4a48c2.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:3005';\nexport const MAX_SIZE = {\n  columns: 7,\n  rows: 12,\n}\n","import React from 'react';\nimport Textarea from 'react-textarea-autosize';\n\nfunction QuestionTitle(props) {\n  const {handleChange, value} = props;\n  \n  return (\n    <div>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <label htmlFor=''>\n          <Textarea\n            type='text'\n            value={value}\n            onChange={handleChange}\n            placeholder='Question Title'\n            style={styles.questionInput}\n          />\n        </label>\n      </form>\n    </div>\n  )\n}\n\nconst styles = {\n  questionInput: {\n    fontSize: '26px',\n    width: '90%',\n    margin: '10px',\n    marginLeft: '10',\n    resize: 'none',\n    maxHeight: '100px',\n    overflow: 'hidden',\n    border: 'none',\n    borderBottom: '1px solid gray',\n  }\n}\nexport default QuestionTitle;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { API_URL } from './../utils/config'\nimport M from \"materialize-css\";\n\nclass AddButton extends Component {\n  state = {\n    selectedFile: null,\n    currentLabel: {}\n  };\n\n  triggerFileInput = (e) => {\n    e.preventDefault();\n    this.fileInput.click();\n  }\n\n  fileSelectedHandler = async e => {\n    await this.setState({ selectedFile: e.target.files[0] });\n    this.fileUploadHandler();\n  };\n\n  fileUploadHandler = () => {\n    const url = `${API_URL}/image/`;\n    const fd = new FormData();\n    fd.append(\"image\", this.state.selectedFile, this.state.selectedFile.name);\n\n    axios\n      .post(url, fd, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(res => {\n        const labelType = this.props.name.slice(0, 3);\n        this.props.updateImage(labelType, this.props.name, res.data);\n      })\n      .catch(err => console.error(\"Image upload error\", err));\n  };\n\n  componentDidMount() {      \n    M.AutoInit();\n  }\n\n  render() {\n    const { label } = this.props;\n    return (\n      <div>\n        <form action=\"/action_page.php\">\n          <input\n            type=\"file\"\n            onChange={this.fileSelectedHandler}\n            style={{ display: \"none\" }}\n            ref={fileInput => (this.fileInput = fileInput)}\n          />\n          {\n            (!label.image)\n              ? (<a \n                  style={styles.addBtnWrapper}\n                  href=\"#!\"\n                  onClick={this.triggerFileInput}>\n                <button\n                  style={styles.addImageBtn}\n                  className=\"btn waves-effect waves-light teal lighten-2 add-question-btn center-align z-depth-2\"\n                >\n                  <i className=\"medium material-icons\">add_photo_alternate</i>\n                </button>\n                </a>)\n              : (<img \n                  src={label.image} \n                  alt=\"\" \n                  style={styles.labelImage}\n                />)\n          }\n        </form>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  labelImage: {\n    border: \"0\",\n    background: \"none\",\n    textDecoration: \"none\",\n    width: \"48px\",\n    height: \"48px\",\n    margin: '0',\n    marginBottom: '0px',\n    boxShadow: '2px 3px 4px 1px rgba(0,0,0,0.18)',\n  },\n  addBtnWrapper: {\n    textAlign: 'center',\n  },\n  addImageBtn: {\n    width: '48px',\n    height: '48px',\n    paddingTop: '5px',\n    margin: '0',\n    marginBottom: '5px',\n  },\n};\n\nexport default AddButton;\n","import React from 'react';\nimport AddImage from './AddImage';\nimport M from 'materialize-css';\nimport Textarea from 'react-textarea-autosize';\n\nfunction Label(props) {\n  const { index, label, labelType, value, labelMethods } = props;\n  const { handleLabelChange, updateImage, deleteLabel } = labelMethods;\n\n  M.AutoInit();\n\n  return (\n    <div style={styles.labelContainer[labelType]}>\n\n      <a href=\"#!\" onClick={() => deleteLabel(labelType, index)}>\n        <i className=\"xsmall material-icons\" style={styles.deleteLabel[labelType]}>close</i>\n      </a>\n      <div>\n        <AddImage\n          label={label}\n          name={`${labelType}${index}`}\n          updateImage={updateImage}\n        />\n      </div>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <label>\n          <Textarea\n            name={`${labelType}${index}`}\n            type='text'\n            value={value || ''}\n            placeholder={`${labelType}${index}`}\n            onChange={(e) => handleLabelChange(e, labelType)}\n            style={styles.labelInput[labelType]}\n          />\n        </label>\n      </form>\n    </div>\n  )\n}\n\nconst styles = {\n  deleteLabel: {\n    row: {\n      width: '13px',\n      height: '13px',\n      position: 'relative',\n      left: '-10px',\n      color: 'black',\n      fontSize: '14px',\n    },\n    col: {\n      width: '13px',\n      height: '13px',\n      position: 'relative',\n      top: '-2px',\n      left: '6px',\n      color: 'black',\n      fontSize: '14px'\n    }\n  },\n  labelContainer: {\n    row: {\n      display: 'flex',\n      alignItems: 'center',\n      position:'relative',\n      justifyContent: 'space-evenly',\n      flexDirection: 'row',\n      width: '90px',\n      height: 'auto',\n      padding: '5px',\n      marginTop: '15px',\n      marginBottom: '15px',\n    },\n    col: {\n      display: 'flex',\n      position:'relative',\n      flexDirection: 'column',\n      width: '50px',\n      height: 'auto',\n      marginLeft: '40px',\n      padding: '10px 10px 10px 10px',\n      textAlign: 'center',\n    },\n  },\n  labelInput: {\n    row: {\n      width: '100px',\n      textAlign: 'center',\n      marginBottom: '0px',\n      marginLeft: '10px',\n      marginRight: '50px',\n      fontSize: '12px',\n      resize: 'none',\n      maxHeight: '100px',\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      border: 'none',\n    },\n    col: {\n      marginTop: '5px',\n      width: '70px',\n      marginLeft: '-12px',\n      textAlign: 'center',\n      resize: 'none',\n      maxHeight: '100px',\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      border: 'none',\n    }\n  },\n}\n\nexport default Label;","import React, { Component } from \"react\";\nimport M from \"materialize-css\";\nimport equal from 'fast-deep-equal';\n\nclass RowOptions extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      answersArray: []\n    }\n  }\n\n  // col, colIndex, updateRow, row\n  \n  renderRadioButtons = (colIndex, columns, updateRow, rowIndex ) => {\n\n    return (\n      <div key={colIndex} style={styles.inputBox}>\n        <p>\n          <label>\n            <input\n              type='radio'\n              style={styles.radioInput}\n              name='group1'\n              id={`choice_${colIndex}`}\n              value={colIndex}\n              checked={this.state.answersArray[colIndex] || false}\n              onChange={() => updateRow(rowIndex, columns.length, colIndex, (`col${colIndex}`))}\n            />\n            <span></span>\n          </label>\n        </p>\n      </div>\n    );\n  }\n\n  updateState = async (props) => {\n    if ( props.row.answers.length === 0) {\n      await this.setState({answersArray: new Array( props.columns.length).fill(false)})\n    }\n    else {\n      await this.setState({answersArray:  props.row.answers});\n    } \n  }\n\n  \n  componentDidUpdate() {\n    if (!equal(this.state.answersArray, this.props.row.answers) && this.props.row.answers.length > 0) {\n      this.updateState(this.props);\n    }\n  }\n  \n  componentDidMount () {\n    M.AutoInit();\n    this.updateState(this.props);\n  }\n  \n  render () {\n    let { columns, updateRow, indexNum } = this.props;\n    columns = [...columns];\n\n    return (\n      <div style={styles.inputFormWrapper}>\n      <form action=\"#\" style={styles.inputForm}>\n        {\n          (!columns)\n            ? null\n            : columns.map((col, colIndex) => this.renderRadioButtons(colIndex, columns, updateRow, indexNum))\n        }\n      </form>\n    </div>\n  )\n}\n  \n}\n\nconst styles = {\n  inputFormWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  inputForm: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: '100px',\n    width: 'auto',\n    marginLeft: '22px',\n\n  },\n  inputBox: {\n    textAlign: 'center',\n    width: '50px',\n    padding: '10px',\n    marginLeft: '40px',\n\n  },\n  \n  radioInput: {\n    color: 'red',\n    height: '20px',\n    width: '20px',\n    opacity: '1 !important',\n  }\n}\n\nexport default RowOptions;","import React from 'react';\nimport M from 'materialize-css';\n\nfunction AddButton(props) {\n  const { labelType, addLabel } = props;\n  M.AutoInit();\n  \n  return (\n    <button\n      style={styles.addButton[labelType]}\n      className=\"btn-floating btn-medium waves-effect waves-light cyan darken-3 add-question-btn center-align\"\n      onClick={() => addLabel(labelType)}\n    >\n      <i className=\"medium material-icons\">playlist_add</i>\n    </button>\n  )\n}\n\nconst styles = {\n  addButton :{\n    row: {\n      margin: '0',\n      marginTop: '30px',\n      marginLeft: '-50px',\n    },\n    column: {\n      marginLeft: '35px',\n      marginTop: '37px',\n    },\n  },\n}\n\nexport default AddButton;","export class Question {\n  constructor() {\n\n    this.id = 0;\n    this.question = \"\";\n    this.columns = [];\n    this.rows = [];\n    this.imagesUploaded = 0;\n    this.minCol = undefined;\n    this.maxCol = undefined;\n    this.minRow = undefined;\n    this.maxRow = undefined;\n  }\n};\n\nexport class Column { \n  constructor() {\n    this.image = undefined;\n    this.label = undefined; \n  } \n};\n\nexport class Row {\n  constructor() {\n    this.image = undefined;\n    this.label = undefined;\n    this.answer = undefined;\n    this.answers = []\n  } \n};","export const normalizeNumber = (num) => {\n  if (isFinite(num)) return num;\n  else return '';\n};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router';\nimport axios from \"axios\";\nimport shortid from 'shortid';\nimport { API_URL, MAX_SIZE } from './../utils/config'\nimport \"./QuestionScreen.css\";\n\nimport QuestionTitle from \"../components/QuestionTitle\";\nimport Label from \"../components/Label\";\nimport RowOptions from \"../components/RowOptions\";\nimport AddButton from \"../components/AddButton\";\nimport { createQuestion, updateQuestion } from \"../redux/actions\";\nimport { Question, Column, Row } from './../utils/schemas';\nimport { normalizeNumber } from './../utils/normalizeNumber'\n\nclass QuestionScreen extends Component {\n  state = new Question();\n\n  handleTitleChange = async (e) => {\n    e.preventDefault();\n    await this.setState({ question: e.target.value });\n    this.props.updateQuestion(this.state);\n  };\n\n  ////  LABEL METHODS ////\n  handleLabelChange = async (e, labelType) => {\n    e.preventDefault();\n    const i = e.target.name.slice(3, e.target.name.length);\n    const rowsOrColumns = labelType === \"row\" ? \"rows\" : \"columns\";\n\n    const labelsArray = [...this.state[rowsOrColumns]];\n    labelsArray[i].label = e.target.value;\n\n    await this.setState({ [rowsOrColumns]: labelsArray });\n    this.props.updateQuestion(this.state);\n    this.setLabelLengths(rowsOrColumns);\n  };\n\n  addLabel = async (labelType) => {\n    const rowsOrColumns = labelType === \"row\" ? \"rows\" : \"columns\";\n    const labelsArray = [...this.state[rowsOrColumns]];\n\n    if (labelsArray.length === MAX_SIZE[rowsOrColumns]) return;\n    labelsArray.push( (labelType === \"row\") ? new Row() : new Column());\n    await this.setState({ [rowsOrColumns]: labelsArray });\n    this.props.updateQuestion(this.state);\n  };\n\n  deleteLabel = async (labelType, index) => {\n    const rowsOrColumns = labelType === \"row\" ? \"rows\" : \"columns\";\n    const labelsArray = [...this.state[rowsOrColumns]];\n\n    let { imagesUploaded } = this.state;\n    if (labelsArray[index].image) imagesUploaded -= 1;\n    labelsArray.splice(index, 1);\n\n    await this.setState({ [rowsOrColumns]: labelsArray, imagesUploaded });\n    this.props.updateQuestion(this.state);\n    this.setLabelLengths(rowsOrColumns);\n  };\n\n  updateImage = async (labelType, name, imageUrl) => {\n    const index = name.slice(3, name.length);\n    const imagesUploaded = this.state.imagesUploaded + 1;\n\n    const rowsOrColumns = labelType === \"row\" ? \"rows\" : \"columns\";\n    const labelsArray = [...this.state[rowsOrColumns]];\n    labelsArray[index].image = imageUrl;\n    await this.setState({ [rowsOrColumns]: labelsArray, imagesUploaded });\n    this.props.updateQuestion(this.state);\n  };\n\n  setLabelLengths = async labelType => {\n    let minLabel = Number.POSITIVE_INFINITY;\n    let maxLabel = Number.NEGATIVE_INFINITY;\n    const labelsArray = this.state[labelType];\n\n    labelsArray.forEach(obj => {\n      if (obj.label && obj.label.length < minLabel) minLabel = obj.label.length;\n      if (obj.label && obj.label.length > maxLabel) maxLabel = obj.label.length;\n    });\n\n    if (labelType === \"columns\") {\n      await this.setState({ minCol: minLabel, maxCol: maxLabel });\n    } else await this.setState({ minRow: minLabel, maxRow: maxLabel });\n  };\n\n  ////  ROW METHODS ////\n  updateRow = async (rowIndex, numberOfColumns, checkedIndex, answer) => {\n    const rows = [...this.state.rows];\n    rows[rowIndex].answers = new Array(numberOfColumns).fill(false);\n    rows[rowIndex].answers[checkedIndex] = true;\n    rows[rowIndex].answer = answer;\n    await this.setState({ rows });\n    this.props.updateQuestion(this.state);\n  }\n\n  resetRows = async () => {\n    const rows = [...this.state.rows];\n    const emptyRows = rows.map( (row) => {\n      row.answers = new Array( this.state.columns.length).fill(false);\n      return row;\n    });\n    await this.setState({ rows: emptyRows });\n    this.props.updateQuestion(this.state);\n  }\n\n  ////  API METHODS ////\n  saveQuestion = () => {\n    axios\n      .post(`${API_URL}/question`, this.state)\n      .then(res => this.props.history.push('/'))\n      .catch(err => console.error(\"Image upload error\", err));\n  };\n\n\n  componentDidMount() {\n    const question = this.props.location.state;\n    if (!question) {\n      (async () => {\n        await this.setState({ id: shortid.generate()});\n        this.addLabel('column');\n        this.addLabel('row');\n        this.props.createQuestion(this.state);\n      })();\n    } else {\n      this.setState(question.question);\n    }\n  }\n\n  render() {\n    const {columns, rows, imagesUploaded, minCol, maxCol, minRow, maxRow } = this.state;\n    const { handleLabelChange, updateImage, deleteLabel } = this;\n    const labelMethods = { handleLabelChange, updateImage, deleteLabel };\n\n    return (\n      <div className=\"container-main\">\n        <div id=\"question\">\n          <QuestionTitle\n            value={this.state.question || ''}\n            handleChange={this.handleTitleChange}\n          />\n\n          <div id=\"question-columns\">\n            {(columns)\n              ? columns.map((column, index) => {\n                  return (\n                    <Label\n                      labelType=\"col\"\n                      index={index}\n                      key={index}\n                      label={column}\n                      value={columns[index].label}\n                      labelMethods={labelMethods}                 \n                    />\n                  );\n                })\n              : null}\n            <AddButton labelType=\"column\" addLabel={this.addLabel} />\n          </div>\n\n          <div id=\"question-rows\">\n            {(rows)\n              ? rows.map((row, index) => {\n                  return (\n                    <div key={index} className=\"row\">\n                    \n                      <Label\n                        labelType=\"row\"\n                        index={index}\n                        label={row}\n                        value={rows[index].label}\n                        labelMethods={labelMethods}\n                      />\n                      <RowOptions\n                        indexNum={index}\n                        columns={columns}\n                        updateRow={this.updateRow}\n                        row={row}\n                      />\n                    </div>\n                  );\n                })\n              : null}\n            <AddButton labelType=\"row\" addLabel={this.addLabel} />\n          </div>\n\n          <button className=\"save-btn btn waves-effect waves-light\" onClick={this.saveQuestion}>\n            Save Question\n          </button>\n\n          <button className=\"save-btn btn waves-effect cyan darken-3  waves-light\" onClick={this.resetRows}>\n            Reset Form\n          </button>\n\n        </div>\n\n        <div id=\"summary\">\n          <h3>Summary</h3>\n          <p> Number of rows: {rows.length} </p>\n          <p> Number of columns: {columns.length} </p>\n          <p> Number of images uploaded: {imagesUploaded} </p>\n\n          <p> Longest row label: {normalizeNumber(maxRow)} </p>\n          <p> Shortest row label: {normalizeNumber(minRow)} </p>\n          <p> Longest column label: {normalizeNumber(maxCol)} </p>\n          <p> Shortest column label: {normalizeNumber(minCol)} </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  createQuestion: question => dispatch(createQuestion(question)),\n  updateQuestion: updatedQuestion => dispatch(updateQuestion(updatedQuestion))\n});\n\nconst QuestionScreenWithRouter = withRouter(QuestionScreen)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionScreenWithRouter);\n","////  ACTIONS ////\nexport const createQuestion = (question) => ({\n  type: 'CREATE_QUESTION',\n  question\n});\n\nexport const storeAllQuestions = (questions) => ({\n  type: 'STORE_ALL_QUESTIONS',\n  questions\n});\n\nexport const updateQuestion = (updatedQuestion) => ({\n  type: 'UPDATE_QUESTION',\n  updatedQuestion\n});\n\nexport const saveQuestionID = (id) => ({\n  type: 'SAVE_QUESTION_ID',\n  id\n});\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { API_URL } from './../utils/config'\nimport './Dashboard.css';\nimport shortid from 'shortid';\nimport M from \"materialize-css\";\n\nimport { storeAllQuestions } from \"../redux/actions\";\n\nclass Dashboard extends Component {\n\n  getAllQuestions = () => {\n    axios\n      .get(`${API_URL}/questions`)\n      .then(res => this.props.storeAllQuestions(res.data))\n      .catch(err => console.error(\"Fetch All Question error\", err));\n  }\n\n  deleteQuestion = async (id) => {\n    axios\n      .delete(`${API_URL}/question/${id}`)\n      .then(res => this.props.storeAllQuestions(res.data))\n      .catch(err => console.error(\"Delete question error\", err));\n  }\n\n  componentDidMount() {\n    M.AutoInit();\n    this.getAllQuestions();\n  }\n\n  render() {\n    const questions = this.props.questions || [];\n    return (\n      <div className='container-dashboard'>\n\n        <h3 className=\"header\">Dashboard</h3>\n        <button\n          className=\"btn-floating btn-large waves-effect waves-light green add-question-btn pulse z-depth-2\"\n          onClick={() => this.props.history.push('/question')}\n        >\n          <i className=\"material-icons\">add</i>\n        </button>\n        {\n          (questions.length === 0)\n            ? (<h5>Press\n              <span className=\"btn-floating btn-small waves-light green add-question-btn-sm\">\n                <i className=\"material-icons\">add</i>\n              </span>\n              to add new Question\n            </h5>)\n            : questions.map(question => {\n              return (\n                  <div\n                    className='question-tab card z-depth-3'\n                    key={shortid.generate()}\n                  >\n                    <h6>Question:</h6>\n                    <Link to={{\n                      pathname: '/question',\n                      state: { question: question }\n                    }}\n                    >\n                      <h4 className='question-title-link'>{question.question || '...'}</h4>\n                    </Link>\n                    <div className=\"buttons-wrapper\">\n                      <Link to={{\n                        pathname: '/question',\n                        state: { question: question }\n                      }}\n                        className=\"dashboard-tab-btn btn-floating waves-effect waves-light btn\"\n                      >\n                        <i className=\"material-icons left z-depth-3\">edit</i>\n                      </Link>\n                      <div\n                        onClick={() => this.deleteQuestion(question.id)}\n                        className=\"dashboard-tab-btn btn-floating waves-effect waves-light btn red\"\n                      >\n                        <i className=\"material-icons left z-depth-3\">delete</i>\n                      </div>\n                    </div>\n                  </div>\n                )\n            })\n            \n        }\n      </div>)\n  }\n}\n\nconst mapStateToProps = state => ({\n  questions: state.questions,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  storeAllQuestions: (questions) => dispatch(storeAllQuestions(questions)),\n});\n\nconst DashboardWithRouter = withRouter(Dashboard)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DashboardWithRouter);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport QuestionScreen from './screens/QuestionScreen';\nimport Dashboard from './screens/Dashboard';\n\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'material-icons';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard}></Route>\n          <Route path=\"/question\" component={QuestionScreen}></Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","////    REDUCERS    ////\nimport { combineReducers } from 'redux';\n\nconst selectedQuestionId = (state = null, action) => {\n    switch (action.type) {\n        case \"SAVE_QUESTION_ID\":\n            return action.id;\n\n        default:\n            return state;\n    }\n}\n\nconst questions = (state = [], action) => {\n    switch (action.type) {\n        case 'STORE_ALL_QUESTIONS':\n            return [...action.questions];\n\n        case \"CREATE_QUESTION\":\n            return [...state, action.question];\n\n        case 'UPDATE_QUESTION':\n            const { id } = action.updatedQuestion;\n            let newState = state.map(q => {\n                if (q.id !== id) return q;\n                return { ...q, ...action.updatedQuestion };\n            });\n            return [...newState];\n\n        default:\n            return state;\n    }\n}\n\nconst allReducers = combineReducers({\n    selectedQuestionId,\n    questions\n});\n\nexport default allReducers;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'; \nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport reducers from './redux/reducers/';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\ndocument.title = 'Question Editor';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}